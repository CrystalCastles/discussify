import Head from "next/head";
import {
  useSupabaseClient,
  useSession,
} from "@supabase/auth-helpers-react";
import { useEffect, useState } from "react";
import CuratedResults from "../components/CuratedResults";
import nookies from 'nookies';
import { parseCookies } from 'nookies';
import { motion, AnimatePresence } from "framer-motion";
import Footer from "../components/Footer";

export default function Home() {
  const supabase = useSupabaseClient();
  const session = useSession();
  const [recentlyPlayed, setRecentlyPlayed] = useState();
  const [recentlyCommented, setCommented] = useState();
  const [newReleases, setNewReleases] = useState();
  const cookies = parseCookies();

  nookies.set(null, 'Testing2', 'test2');

  useEffect(() => {
    if(session) {
      if(!cookies['__spotifyToken']) {
        nookies.set(null, '__spotifyToken', session.provider_token);
      }
      if(!cookies['__spotifyRefreshToken']) {
        nookies.set(null, '__spotifyRefreshToken', session.provider_refresh_token);
      }
    
      if(cookies['__spotifyToken']) {
        getSpotifyData(cookies['__spotifyToken']);
      } else {
        getSpotifyData(session.provider_token);
      }
      getRecentlyCommentedOn();
    }
  }, [session]);


  async function signInWithSpotify() {
    try {
      const { error, data } = await supabase.auth.signInWithOAuth(
        {
          provider: "spotify",
          options: {
            scopes: "user-read-recently-played",
            // queryParams: {
            //   show_dialog: true,
            // },
          }
        },
      );
      if (error) {
        alert("Error with auth: " + error.message);
      }
    } catch {
      console.log("error", error);
      alert(error.error_description || error);
    }
  }

  async function getRecentlyPlayed(token) {
    return fetch("/api/spotify", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        token,
        recent: true
      })
    }).then(async (response) => {
      if (response.ok) {
        const data = await response.json();
        setRecentlyPlayed(data);
      } else {
        setRecentlyPlayed(null);
        return response.status;
      }
    });
  }

  async function getRecentlyCommentedOn() {
    fetch("/api/comments/retrieve", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        recentlyCommentedOn: true
      })
    }).then(async (response) => {
      if (response.ok) {
        const data = await response.json();
        setCommented(data);
      } else {
        setCommented(null);
      }
    });
  }

  async function getNewReleases(token) {
    fetch("/api/spotify", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        token,
        newReleases: true
      })
    }).then(async (response) => {
      if (response.ok) {
        const data = await response.json();
        setNewReleases(data);
      } else {
        setNewReleases(null);
      }
    });
  }

  async function getSpotifyData(token) {
    let recentlyPlayedStatus = await getRecentlyPlayed(token);
    if(recentlyPlayedStatus === 401) {
      fetch("/api/spotify", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          refreshToken: cookies['__spotifyRefreshToken'],
        })
      }).then(async (response) => {
        if (response.ok) {
          const data = await response.json();
          nookies.set(null, '__spotifyToken', data.access_token);
          return getSpotifyData(data.access_token);
        } else {
          console.log("Error refreshing token.")
        }
      });
    } else {
      await getNewReleases(token);
    }
  }

  return (
    <>
      <Head>
        <title>Bantafy</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-mainBlack min-h-screen">
        {session ? (
          <>
            <div className="grid lg:grid-cols-1 xl:grid-cols-2 2xl:grid-cols-3 gap-10 xs:mx-5 overflow-hidden pt-[5rem]">
              <div className="">
                <h1 className="text-white text-center text-2xl font-semibold">RECENTLY PLAYED</h1>
                { recentlyPlayed && <CuratedResults media={recentlyPlayed}/> }
              </div>
              <div className="">
                <h1 className="text-white text-center text-2xl font-semibold ml-5">RECENTLY ACTIVE</h1>
                { recentlyCommented && <CuratedResults media={recentlyCommented}/> }
              </div>
              <div className="">
                <h1 className="text-white text-center text-2xl font-semibold">NEW RELEASES</h1>
                { newReleases && <CuratedResults media={newReleases}/> }
              </div>
            </div>
          </>
        ) : (
          <div className="flex h-screen items-center justify-center">
            <AnimatePresence>
            <div className="text-center">
              <h1 className="text-white xs:text-[3rem] md:text-[5rem]">Bantafy</h1>
              <p className="text-white xs:text-md md:text-lg">Comment on and chat about anything on Spotify</p>
              <button
                className="text-lg inline-block rounded-full bg-spotifyGreen px-8 py-3 my-10 font-medium leading-tight text-white shadow-md transition duration-150 ease-in-out hover:bg-green-600 hover:shadow-lg focus:bg-green-600 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-green-700 active:shadow-lg"
                onClick={signInWithSpotify}
              >
                Log In with Spotify
              </button>
            </div>
            </AnimatePresence>
          </div>
        )}
        <Footer />
      </main>
    </>
  );
}